// struct declaration 
S: struct {
    a: u32;
    b: u32*;
}

// function definition
do_nothing: func(a: u32) -> u32 = {
    a
}

//functions with a single expression can be written as such
add: fn(x: i32, y: i32) -> i32 = x + y;
add: fn(x: i32, y: i32) = x + y; //it can infer the return type

//should I allow associated methods? or use c-style and pass pointers to functions
//  idea: assign anonymous function to function pointer field of struct
struct AssocMethod {
	some_fn: Fn(i32, i32) -> i32; //fn pointer syntax
	some_data: i32;
}

AssocMethod::some_fn: fn(x: i32, y: i32) = x + y;

//implicitly pass a self pointer when calling such associated methods
//e.g.
//let s = AssocMethod{...};
//s.can_access_self()
//same as
//AssocMethod::can_access_self(s&);
AssocMethod::can_access_self: fn(self: AssocMethod*) = self.some_data;



//rust style error handling 
Option<T>: union {
    Some: T;
    None;
}

can_fail: fn() -> Option<i32> = None

handle_fail: fn() -> Option<i32> = {
	let res_a = can_fail()?; //rust style ? syntax
	let res_b = can_fail()?;
	Some(a + b)
}

main: proc() -> i32 = {
    let a: u32 = 32;
    let b = &a; //b is pointer not reference because pointers are based
    let c: u8[4] /* is [u8; 4] better? */ = *b;

    //ifs are expressions
    let d = if c[0] { a * 2 } else { a / 2 };

    //optional parens?
    let d = do_nothing 15;
	
	//lambdas
	let a_fn: Fn() -> i32 = fn() = 32;
	//or just
	let a_fn = fn() = 32;
	//idk about the two =s though. they look a bit unclean;
	
	0 //success from main
}


//procs can have side effects
//fns are pure functions
//procs can call procs or fns
//fns can only call fns
something: fn() = {
	putd(6); //ERROR: can't call proc from fn
}

/*
More ideas
----------
I REALLY NEED TO SYNC THIS (one way or another, idk) WITH SPEC/SRC/UNSURE.MD

To document:
	- protocol template shit
	- 

Definitely going in, need finalising
------------------------------------

Boolean operators use keywords

Not sure
--------

Units
- some variables can optionally be assigned a unit and multipliers can automatically be added
mut a = 13µm;
a += 10nm;
- many problems
- functions like sqrt modify types
- 10m/5s = 2ms^-1 or something


Operators
- define custom operators?
- @ for deref
- ugh maybe I should have a range operator
- maybe more like
	- sqrt
	- square
	- append
	- reverse (~)
	- split
	- `in`
	- len (#)
		- I like this one
	- divisibility
- chained operators, a < b < c
	- perhaps support ≤ for <= etc for the lolz
	- maybe that could also be the range syntax
		- for 3 < x < 10 {}
		- for x < 10 {}
	

Pipe operator
- like functional languages
- [3,2,1] |> sorted |> fn(n:i32) = n + 1
	- kinda need a better way of defining lambdas.

Partial application
- like functional languages again
- helps previous
- maybe some syntax sugar in conjunction with/instead of partial application
	- [3, 2, 1] |> add(1, $) where that creates a lambda and passes in the value piped in as $
		- maybe have $add(1, $)
	- perhaps better lambdas, like \x -> map f x like in haskell
		- but I don't like \
		- seen lambda syntax of [n → n+1], don't think it would fit but maybe good ideas

Maybe I should not have operator precedence
- maybe implicit parens lol, 1 * 2+3 == 1 * (2 + 3)

Lua-style string literals
- allows nesting, cos opening != closing

Generalised <something>= syntax
- like +=, -= etc but works on any function
- a max= b is sugar for a = max(a, b)
- a foo= (b, c) is sugar for a = foo(a, b, c)


Really should have some kind of built-in GUI, args processor, whatnot like py for a reasonably good experience, but not to detract from 3rd party libraries

Compile-time guarentees (also can be specified by the programmer) that values will be in certain ranges

See side effects at method usage
- maybe just mem, but others as well. show where memory is being allocated because that's important
	- current idea: declare a block that allocates using proc$ and call it with $ (like malloc$())
	- would be great to expand this to other effects.

Slices
- need syntax and rules for converting owned types to slices (String to Slice[char], Vec[T] to Slice[T] etc)

Need a way to implement a protocol on a type you haven't created.

Template syntax
- maybe no use <>

Figure out how tf protocols work with templates.


*/