import "liblemon/mem.lime"
import "liblemon/cstr.lime"
import "liblemon/slice.lime"
import "liblemon/vec.lime"
// Len: protocol {}
// Len::len: func(self: Self*) -> u64;


// TODO auto forward declare this
// String: struct;

// StringOps: protocol {
// 	// requires these to implement common functions. Problematic because then String and Slice must have similar internal structures
// 	data: char*;
// 	length: u64;
// }

// StringOps::index: func(self: Self*, idx: u64) -> char = self.data[idx];


make_seg: func(data: char*, seg_len: u32) -> Slice<char> {
	if seg_len > 0 {
		let seg = malloc(seg_len);
		memcpy(data, seg, seg_len);
		Slice<char>::from_pointer(seg, seg_len)
	} else {
		Slice<char>::from_pointer(0, 0) // empty string
	}
}

// StringOps::split: func(self: Self*, delim: char) -> Vec<Slice<char>> {
// 	let splits = Vec<Slice<char>>::new();
// 	let last_delim = 0;
// 	let pos = 0;
// 	while pos < self.length {
// 		if self.data[pos] == delim {
// 			let seg_len = pos - last_delim;
// 			splits.push(make_seg(self.data + pos, seg_len));
// 		}
// 		pos += 1;
// 	}
// 	splits.push(make_seg(self.data + pos, pos - last_delim));
// 	splits
// }


String: struct {
	length: u32;
	data: char*;
}

// String::to_vec: func(self: String*) -> Vec<char> = Vec::from_pointer(self.data, self.length);
String::len: func(self: String*) -> u64 = self.length;
// Slice<T>::len<T>: func(self: Slice<T>) -> u64 = self.length; // in slice.lime

// Slice<char> implements StringOps + Len; //TODO syntax
// String implements StringOps + Len;
