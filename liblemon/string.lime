import "liblemon/mem.lime"

// TODO
// templates
// :: for static fn access
// operator .
// operator []
// pointer arith

strlen: fn(data: char*) -> u64;

String: struct {
	length: u32;
	data: char*;
}

String::from_c_str: fn(data: char*) 			   = String { length: strlen(data), data: data };
String::from_pointer: fn(data: char*, length: u32) = String { length: length,       data: data };

// make_seg: fn(data: char*, seg_len: u32) -> String = {
// 	if seg_len > 0 {
// 		let seg = malloc(seg_len);
// 		memcpy(data, seg, seg_len);
// 		String { length: seg_len, data: seg }
// 	} else {
// 		String { length: 0, data: 0 }
// 	}
// }

// String::split: fn(self: String*, delim: char) -> Vec<String> = {
// 	let splits = Vec<String>::new();
// 	let last_delim = 0;
// 	let pos = 0;
// 	while pos < self.length {
// 		if self.data[pos] == delim {
// 			let seg_len = pos - last_delim;
// 			splits.push(make_seg(self.data + pos, seg_len));
// 		}
// 		pos += 1;
// 	}
// 	splits.push(make_seg(self.data + pos, pos - last_delim));
// 	splits
// }
//String::to_vec: fn(self: String*) -> Vec<String> = Vec::from_pointer(self.data, self.length);