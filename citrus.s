.text
.globl funca
.type funca, @function
.globl funcb
.type funcb, @function
.globl main
.type main, @function
funca:                                          # funcdef:238       []
    pushq       %rbp                            # funcdef:240       []
    movq        %rsp,       %rbp                # funcdef:241       []
    subq        $16,        %rsp                # funcdef:242       []
    movq        %rdi,       -0(%rbp)            # funcdef:249       []
    movq        %rsi,       -8(%rbp)            # funcdef:249       []
    movq        -0(%rbp),   %rax                # ident:209         ['%rax ident:208']
    movq        -8(%rbp),   %rcx                # ident:209         ['%rax ident:208', '%rcx ident:208']
    movq        $2,         %rdx                # int_literal:197   ['%rax ident:208', '%rcx ident:208', '%rdx int_literal:196']
    imulq       %rcx,       %rdx                # binexpr:188       ['%rax ident:208', '%rcx ident:208', '%rdx int_literal:196']
    imulq       %rax,       %rdx                # binexpr:188       ['%rax ident:208', '%rdx int_literal:196']
    movq        %rdx,       %rax                # funcdef:263       ['%rdx int_literal:196']
    addq        $16,        %rsp                # funcdef:269       []
    popq        %rbp                            # funcdef:270       []
    ret                                         # funcdef:271       []
funcb:                                          # funcdef:238       []
    pushq       %rbp                            # funcdef:240       []
    movq        %rsp,       %rbp                # funcdef:241       []
    subq        $16,        %rsp                # funcdef:242       []
    movq        %rdi,       -0(%rbp)            # funcdef:249       []
    movq        %rsi,       -8(%rbp)            # funcdef:249       []
    movq        -0(%rbp),   %rax                # ident:209         ['%rax ident:208']
    movq        -8(%rbp),   %rcx                # ident:209         ['%rax ident:208', '%rcx ident:208']
    addq        %rax,       %rcx                # binexpr:188       ['%rax ident:208', '%rcx ident:208']
    movq        %rcx,       %rax                # funcdef:263       ['%rcx ident:208']
    addq        $16,        %rsp                # funcdef:269       []
    popq        %rbp                            # funcdef:270       []
    ret                                         # funcdef:271       []
main:                                           # funcdef:238       []
    pushq       %rdi                            # funccall:145      ['%rdi None']
    movq        $1,         %rdi                # int_literal:197   ['%rsi None', '%rdi None']
    movq        $2,         %rsi                # int_literal:197   ['%rsi None', '%rdi None']
    call        funcb                           # funccall:155      ['%rsi None', '%rdi None']
    popq        %rdi                            # funccall:174      ['%rax funccall:158']
    call        putd                            # funccall:155      ['%rax funccall:158', '%rdi None']
    movq        %rax,       %rcx                # funccall:167      ['%rax funccall:158', '%rcx funccall:161', '%rdi None']
    pushq       %rax                            # funccall:145      ['%rax funccall:158']
    pushq       %rdi                            # funccall:145      ['%rdi None']
    movq        $3,         %rdi                # int_literal:197   ['%rsi None', '%rdi None']
    movq        $4,         %rsi                # int_literal:197   ['%rsi None', '%rdi None']
    call        funcb                           # funccall:155      ['%rsi None', '%rdi None']
    popq        %rdi                            # funccall:174      ['%rax funccall:158']
    call        putd                            # funccall:155      ['%rax funccall:158', '%rdi None']
    movq        %rax,       %rcx                # funccall:167      ['%rax funccall:158', '%rcx funccall:161', '%rdi None']
    popq        %rax                            # funccall:174      ['%rax funccall:158', '%rcx funccall:161']
    pushq       %rax                            # funccall:145      ['%rax None']
    pushq       %rdi                            # funccall:145      ['%rdi None']
    movq        $1,         %rax                # int_literal:197   ['%rax int_literal:196', '%rsi None', '%rdi None']
    movq        $2,         %rdi                # int_literal:197   ['%rax int_literal:196', '%rsi None', '%rdi None']
    addq        %rax,       %rdi                # binexpr:188       ['%rax int_literal:196', '%rsi None', '%rdi None']
    movq        $3,         %rax                # int_literal:197   ['%rax int_literal:196', '%rsi None', '%rdi None']
    movq        $4,         %rsi                # int_literal:197   ['%rax int_literal:196', '%rsi None', '%rdi None']
    addq        %rax,       %rsi                # binexpr:188       ['%rax int_literal:196', '%rsi None', '%rdi None']
    call        funca                           # funccall:155      ['%rsi None', '%rdi None']
    popq        %rdi                            # funccall:174      ['%rax funccall:158']
    call        putd                            # funccall:155      ['%rax funccall:158', '%rdi None']
    movq        %rax,       %rcx                # funccall:167      ['%rax funccall:158', '%rcx funccall:161', '%rdi None']
    popq        %rax                            # funccall:174      ['%rax funccall:158', '%rcx funccall:161']
    movq        $0,         %rcx                # int_literal:197   ['%rax None', '%rcx int_literal:196']
    movq        %rcx,       %rax                # funcdef:263       ['%rax None', '%rcx int_literal:196']
    ret                                         # funcdef:271       ['%rax None']
