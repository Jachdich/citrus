.text
.globl funca
.type funca, @function
.globl funcb
.type funcb, @function
.globl main
.type main, @function
funca:                                          # funcdef:269       []
    pushq       %rbp                            # funcdef:271       []
    movq        %rsp,       %rbp                # funcdef:272       []
    subq        $16,        %rsp                # funcdef:273       []
    movq        %rdi,       -0(%rbp)            # funcdef:280       []
    movq        %rsi,       -8(%rbp)            # funcdef:280       []
    movq        $100,       %rax                # int_literal:228   ['%rax int_literal:227']
    movq        $1000,      %rcx                # int_literal:228   ['%rax int_literal:227', '%rcx int_literal:227']
    idivq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx int_literal:227']
    movq        $100,       %rcx                # int_literal:228   ['%rax int_literal:227', '%rcx int_literal:227']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx int_literal:227']
    movq        $10,        %rcx                # int_literal:228   ['%rax int_literal:227', '%rcx int_literal:227']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx int_literal:227']
    movq        $2,         %rcx                # int_literal:228   ['%rax int_literal:227', '%rcx int_literal:227']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx int_literal:227']
    movq        -8(%rbp),   %rcx                # ident:240         ['%rax int_literal:227', '%rcx ident:239']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx ident:239']
    movq        $4,         %rcx                # int_literal:228   ['%rax int_literal:227', '%rcx int_literal:227']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx int_literal:227']
    movq        -0(%rbp),   %rcx                # ident:240         ['%rax int_literal:227', '%rcx ident:239']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx ident:239']
    movq        $3,         %rcx                # int_literal:228   ['%rax int_literal:227', '%rcx int_literal:227']
    imulq       %rcx,       %rax                # binexpr:222       ['%rax int_literal:227', '%rcx int_literal:227']
    addq        $16,        %rsp                # funcdef:300       []
    popq        %rbp                            # funcdef:301       []
    ret                                         # funcdef:302       []
funcb:                                          # funcdef:269       []
    pushq       %rbp                            # funcdef:271       []
    movq        %rsp,       %rbp                # funcdef:272       []
    subq        $16,        %rsp                # funcdef:273       []
    movq        %rdi,       -0(%rbp)            # funcdef:280       []
    movq        %rsi,       -8(%rbp)            # funcdef:280       []
    movq        -8(%rbp),   %rax                # ident:240         ['%rax ident:239']
    movq        -0(%rbp),   %rcx                # ident:240         ['%rax ident:239', '%rcx ident:239']
    addq        %rcx,       %rax                # binexpr:222       ['%rax ident:239', '%rcx ident:239']
    addq        $16,        %rsp                # funcdef:300       []
    popq        %rbp                            # funcdef:301       []
    ret                                         # funcdef:302       []
main:                                           # funcdef:269       []
    movq        $1,         %rdi                # int_literal:228   ['%rdi int_literal:227']
    movq        $2,         %rsi                # int_literal:228   ['%rsi int_literal:227', '%rdi int_literal:227']
    call        funcb                           # funccall:175      []
    movq        %rax,       %rdi                # funccall:190      ['%rdi funccall:180']
    call        putd                            # funccall:175      []
    movq        $3,         %rdi                # int_literal:228   ['%rdi int_literal:227']
    movq        $4,         %rsi                # int_literal:228   ['%rsi int_literal:227', '%rdi int_literal:227']
    call        funcb                           # funccall:175      []
    movq        %rax,       %rdi                # funccall:190      ['%rdi funccall:180']
    call        putd                            # funccall:175      []
    movq        $2,         %rdi                # int_literal:228   ['%rdi int_literal:227']
    movq        $1,         %rax                # int_literal:228   ['%rax int_literal:227', '%rdi int_literal:227']
    addq        %rax,       %rdi                # binexpr:222       ['%rax int_literal:227', '%rdi int_literal:227']
    movq        $4,         %rsi                # int_literal:228   ['%rsi int_literal:227', '%rdi int_literal:227']
    movq        $3,         %rax                # int_literal:228   ['%rax int_literal:227', '%rsi int_literal:227', '%rdi int_literal:227']
    addq        %rax,       %rsi                # binexpr:222       ['%rax int_literal:227', '%rsi int_literal:227', '%rdi int_literal:227']
    call        funca                           # funccall:175      []
    movq        %rax,       %rdi                # funccall:190      ['%rdi funccall:180']
    call        putd                            # funccall:175      []
    movq        $0,         %rax                # int_literal:228   ['%rax int_literal:227']
    ret                                         # funcdef:302       []
